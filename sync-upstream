#!/usr/bin/env py -m pip-run

"""
Sync files from upstream release.
"""

__requires__ = [
    'jaraco.context',
    'jaraco.ui',
    'packaging',
    'requests_toolbelt',
]


import pathlib
import subprocess

import packaging.version
import requests
from jaraco.ui.main import main
from jaraco.context import suppress
from requests_toolbelt import sessions


gh_content = sessions.BaseUrlSession(
    'https://raw.githubusercontent.com/python/cpython/'
)
gh_api = sessions.BaseUrlSession('https://api.github.com/repos/python/cpython/')

paths = (
    'Lib/configparser.py',
    'Lib/test/test_configparser.py',
    'Lib/test/configdata/cfgparser.1',
    'Lib/test/configdata/cfgparser.2',
    'Lib/test/configdata/cfgparser.3',
)


class Version(packaging.version.Version):
    @property
    def is_stable(self):
        """
        Include release candidates in stable.
        """
        return not self.is_prerelease or self.is_rc

    @property
    def is_rc(self):
        return self.pre[1:] == ['rc']


def by_tag(tag):
    return Version(tag['name'])


def is_stable(tag):
    return by_tag(tag).is_stable


def _latest(pre):
    tags = gh_api.get('tags').json()
    filtered = tags if pre else filter(is_stable, tags)
    tag = max(filtered, key=by_tag)
    return tag['name']


@suppress(requests.exceptions.HTTPError)
def ref_info(name):
    resp = gh_api.get(f'git/refs/{name}')
    resp.raise_for_status()
    return resp.json()


def resolve(ref):
    return ref_info(f'heads/{ref}') or ref_info(f'tags/{ref}')


@main
def run(pre: bool = False, ref: str = None):
    ref = ref or _latest(pre)
    ob = resolve(ref)
    for path in paths:
        resp = gh_content.get(f'{ref}/{path}')
        resp.raise_for_status()
        pathlib.Path(path).write_bytes(resp.content)
    cmd = [
        'git',
        'commit',
        '-a',
        '-m',
        f'cpython-{ref} rev={ob["object"]["sha"][:12]}',
    ]
    subprocess.run(cmd)
